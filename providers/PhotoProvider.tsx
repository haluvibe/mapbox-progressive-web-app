import React, { useState, useContext, useEffect } from "react";
import { fetchLicensePlate } from "../src/utils/fetchLicensePlate";

interface PhotoProviderProps {
  children: React.ReactNode;
}

interface PhotoContextValue {
  photo: Blob | null;
  setPhoto: (photo: Blob | null) => void;
  isLoading: boolean;
  hasLoaded: boolean;
  licensePlate: string;
  setLicensePlate: (license: string) => void;
  loadMockData: () => void;
}

const PhotoContext = React.createContext<PhotoContextValue | null>(null);

const usePhoto = () => {
  const context = useContext(PhotoContext);

  if (!context) {
    throw new Error("usePhoto must be used within a PhotoProvider");
  }

  const { photo, setPhoto, isLoading, hasLoaded, licensePlate, loadMockData } =
    context;

  return {
    photo,
    setPhoto,
    isLoading,
    hasLoaded,
    licensePlate,
    loadMockData,
  };
};

const PhotoProvider: React.FC<PhotoProviderProps> = ({ children }) => {
  const [photo, setPhotoState] = useState<Blob | null>(null);
  const [licensePlate, setLicensePlate] = useState("");
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [hasLoaded, setHasLoaded] = useState<boolean>(false);

  const loadMockData = () => {
    setHasLoaded(false);
    setIsLoading(true);

    const byteCharacters = atob(
      ""
    );
    const byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([byteArray], { type: "image/jpeg" });
    setPhotoState(blob);
    setLicensePlate("AO31BE");

    setTimeout(() => {
      setHasLoaded(true);
      setIsLoading(false);
    }, 1500);
  };

  const setPhoto = async (newPhoto: Blob | null) => {
    setHasLoaded(false);
    setIsLoading(true);

    setPhotoState(newPhoto);

    if (newPhoto) {
      const { license, parsedWords } = await fetchLicensePlate(newPhoto!);
      setLicensePlate(license ?? parsedWords);
    }

    setIsLoading(false);
    setHasLoaded(true);
  };

  useEffect(() => {
    if (!photo) {
      setHasLoaded(false);
      setIsLoading(true);
      return;
    }

    if (hasLoaded) {
      setIsLoading(false);
      return;
    }
  }, [photo]);

  const contextValue: PhotoContextValue = {
    photo,
    setPhoto,
    isLoading,
    hasLoaded,
    licensePlate,
    setLicensePlate,
    loadMockData,
  };

  return (
    <PhotoContext.Provider value={contextValue}>
      {children}
    </PhotoContext.Provider>
  );
};

export { PhotoProvider, usePhoto };
